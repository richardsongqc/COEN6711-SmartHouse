/********************************************************************************
*
* Freescale Semiconductor Inc.
* (c) Copyright 2004-2010 Freescale Semiconductor, Inc.
* ALL RIGHTS RESERVED.
*
**************************************************************************//*!
 *
 * @file flash.c
 *
 * @author
 *
 * @version
 *
 * @date
 *
 * @brief The file includes flash routines
 *
 *****************************************************************************/

/*********************************** Includes ***********************************/
#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */
#include "flash_hcs.h" /* include flash driver header file */
/*********************************** Macros ************************************/

/*********************************** Defines ***********************************/

/** Start address of the section that will be re-located in RAM */
#define Start_Copy_In_RAM __SEG_START_FLASH_ROUTINES
/** Size in bytes of the section that will be re-located in RAM */
#define Size_Copy_In_RAM __SEG_SIZE_FLASH_ROUTINES

/********************************** Constant ***********************************/

/*********************************** Variables *********************************/

/** Start Address of the segment defined in the PRM File. External object defined by the linker */
extern char __SEG_START_FLASH_ROUTINES[];
/** Size of the segment defined in the PRM File. External object defined by the linker */
extern char __SEG_SIZE_FLASH_ROUTINES[];

/*********************************** Prototype *********************************/

void vfnCopyInRAM(void);

/*********************************** Function **********************************/

void 
vfnCopyInRAM(void) 
{
  unsigned int Size = (unsigned int)Size_Copy_In_RAM;
  unsigned char *SourcePtr;
  unsigned char *DestinationPtr;
  
  SourcePtr= (unsigned char*)Start_Copy_In_RAM;
  DestinationPtr = (unsigned char*)&Flash_Cmd;
  while (Size--)
  {
    *DestinationPtr = *SourcePtr;
    DestinationPtr++;
    SourcePtr++;
  }
}

/*******************************************************************************
 * Function:        Flash_Init
 *
 * Description:     Set the flash clock
 *
 * Returns:         never return
 *
 * Notes:
 *
 *******************************************************************************/
void 
Flash_Init(unsigned char FlashClockDiv)
{
    /* Flash clock between 150-200kHz - > 24MHz/(15*8)=200kHz*/
    FCDIV = FlashClockDiv;
    vfnCopyInRAM();
}

/**
 * Execute Flash command at runtime: must run at another FLASH block 
 * that is being modified. Usually from RAM
 * @param flash address to modify
 * @param flash data pointer
 * @param flash number of longwords to modify
 * @param flash command  
 * @return none
 */
#pragma CODE_SEG  FLASH_ROUTINES

unsigned char 
Flash_Cmd(unsigned char *FlashAddress, 
          unsigned short FlashDataCounter, 
          unsigned char *pFlashDataPtr, 
          unsigned char FlashCommand)
{	
	/* Check to see if FACCERR or PVIOL is set */
    if (FSTAT&0x30)  
    {         
        /* Clear Flags if set*/
        FSTAT = 0x30;  
    } 

    if (FlashDataCounter)
    {
      do
      {          
          /* Wait for the Last Burst Command to complete */
          while(!(FSTAT&FSTAT_FCBEF_MASK))
          {
            SRS = 0x55;
            SRS = 0xAA;
          }/*wait until termination*/
          
          /* Write Data into Flash*/
          *FlashAddress++ = *pFlashDataPtr++;
          
          /* Write Command */
          FCMD = FlashCommand;
          
          /* Put FCBEF at 1 */
          FSTAT = FSTAT_FCBEF_MASK;
          
          asm(nop);
          asm(nop);
          asm(nop);
          asm(nop);
          
          /* Check if Flash Access Error or Protection Violation Error are Set */
          if (FSTAT&0x30)
          {     
            /* If so, finish the function returning 1 to indicate error */
            return (1);
          }
      }while (--FlashDataCounter);
    }
    /* wait for the last command to complete */
    while ((FSTAT&FSTAT_FCCF_MASK)==0)
    {;}/*wait until termination*/
    
    /* Return zero to indicate that the function executed OK */
    return (0);
}
#pragma CODE_SEG  DEFAULT


