/******************************************************************************
*                                                  
*  (c) copyright Freescale Semiconductor 2008
*  ALL RIGHTS RESERVED
*
*  File Name: Project.prm
*                                                                          
*  Purpose: This file is for a USB Mass-Storage Device bootloader.  This file 
*           is the Linker Command File for the bootloader, and defines the 
*           memory locations for both bootloader and application code
*                                                                          
*  Assembler:  Codewarrior for Microcontrollers V6.2
*                                            
*  Version:  1.3
*                                                                          
*                                                                          
*  Author: Derek Snell                             
*                                                                                       
*  Location: Indianapolis, IN. USA                                            
*                                                                                  
* UPDATED HISTORY:
*
* REV   YYYY.MM.DD  AUTHOR        DESCRIPTION OF CHANGE
* ---   ----------  ------        --------------------- 
* 1.3   2009.11.18  Derek Snell   Modified Bootloader_USB_RAM segment to start 
*                                 at 0x1920 to prevent bootloader variables
*                                 from overlapping with USB buffers
* 1.2   2009.01.12  Derek Snell   Ported to S08 from V1
* 1.1   2008.10.09  Derek Snell   Overlapped RAM of Bootloader and Application
* 1.0   2008.06.10  Derek Snell   Initial version
* 
*
******************************************************************************/                                                                        
/* Freescale  is  not  obligated  to  provide  any  support, upgrades or new */
/* releases  of  the Software. Freescale may make changes to the Software at */
/* any time, without any obligation to notify or provide updated versions of */
/* the  Software  to you. Freescale expressly disclaims any warranty for the */
/* Software.  The  Software is provided as is, without warranty of any kind, */
/* either  express  or  implied,  including, without limitation, the implied */
/* warranties  of  merchantability,  fitness  for  a  particular purpose, or */
/* non-infringement.  You  assume  the entire risk arising out of the use or */
/* performance of the Software, or any systems you design using the software */
/* (if  any).  Nothing  may  be construed as a warranty or representation by */
/* Freescale  that  the  Software  or  any derivative work developed with or */
/* incorporating  the  Software  will  be  free  from  infringement  of  the */
/* intellectual property rights of third parties. In no event will Freescale */
/* be  liable,  whether in contract, tort, or otherwise, for any incidental, */
/* special,  indirect, consequential or punitive damages, including, but not */
/* limited  to,  damages  for  any loss of use, loss of time, inconvenience, */
/* commercial loss, or lost profits, savings, or revenues to the full extent */
/* such  may be disclaimed by law. The Software is not fault tolerant and is */
/* not  designed,  manufactured  or  intended by Freescale for incorporation */
/* into  products intended for use or resale in on-line control equipment in */
/* hazardous, dangerous to life or potentially life-threatening environments */
/* requiring  fail-safe  performance,  such  as  in the operation of nuclear */
/* facilities,  aircraft  navigation  or  communication systems, air traffic */
/* control,  direct  life  support machines or weapons systems, in which the */
/* failure  of  products  could  lead  directly to death, personal injury or */
/* severe  physical  or  environmental  damage  (High  Risk Activities). You */
/* specifically  represent and warrant that you will not use the Software or */
/* any  derivative  work of the Software for High Risk Activities.           */
/* Freescale  and the Freescale logos are registered trademarks of Freescale */
/* Semiconductor Inc.                                                        */ 
/*****************************************************************************/

/* This is a linker parameter file for the mc9s08jm60 */

NAMES END /* CodeWarrior will pass all the needed files to the linker by command line. But here you may add your own files too. */

SEGMENTS /* Here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. */

    // Bootloader Segments
//  Bootloader               =  READ_ONLY    0xEC00 TO 0xFFAD;
    Bootloader               =  READ_ONLY    0xAC00 TO 0xFEFD;
    FLASH_TO_RAM             =  READ_ONLY    0xFEFE TO 0xFFAD RELOCATE_TO 0x0EB0;
    Bootloader_RAM           =  READ_WRITE   0x0100 TO 0x105F;
    Bootloader_USB_RAM       =  READ_WRITE   0x1920 TO 0x195F;
 /* INTVECTS                 =  READ_ONLY    0xFFC4 TO 0xFFFF; Reserved for Interrupt Vectors */
    
    // Application Segments
    ROM                      =  READ_ONLY    0x1960 TO 0x9FA5;
    Z_RAM                    =  READ_WRITE   0x00B0 TO 0x00FF;
    Application_RAM          =  READ_WRITE   0x0100 TO 0x0EAF;
    RAM2_CODE                =  READ_ONLY    0x0EB0 TO 0x0F5F;/*FSL: new for flash routine: 175 bytes*/
    Application_USB_RAM      =  READ_WRITE   0x1860 TO 0x195F;
    ROM1                     =  READ_ONLY    0x10B0 TO 0x17FF;
    ROM2                     =  READ_ONLY    0xFFC0 TO 0xFFC3;
    
    MY_STACK                 =  READ_WRITE   0x0F60 TO 0x10AF;/*FSL: now 335 bytes of stack*/
END

PLACEMENT /* Here all predefined and user segments are placed into the SEGMENTS defined above. */

    DEFAULT_RAM                         INTO  Bootloader_RAM,Bootloader_USB_RAM;


    _DATA_ZEROPAGE, MY_ZEROPAGE         INTO  Z_RAM;

    .init,
//    _PRESTART,                          /* startup code */
    STARTUP,                            /* startup data structures */
    ROM_VAR,                            /* constant variables */
    STRINGS,                            /* string literals */
    VIRTUAL_TABLE_SEGMENT,              /* C++ virtual table segment */
    DEFAULT_ROM,
    COPY                                /* copy down information: how to initialize variables */
                                        INTO  Bootloader; // Protected Bootloader flash
                                        
    FLASH_ROUTINES                       
                                        INTO  FLASH_TO_RAM;      /*FSL: for flash routine*/
    
    SSTACK                              INTO  MY_STACK;

END

STACKTOP  0x10AF


VECTOR 0 _Startup /* Reset vector: this is the default entry point for an application. */

//VECTOR 0 _Entry
//INIT _Entry